{"version":3,"sources":["types.ts","contexts/context.ts","contexts/reducer.ts","utils/data-utils.ts","components/loading.tsx","utils/date-utils.ts","components/pd-filter.tsx","components/pd-chart.tsx","components/pd-view.tsx","components/main.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ActionType","initState","pds","pdFilter","ntRange","cnys","cats","pdCurFilter","cny","cat","Context","createContext","state","dispatch","Reducer","action","type","SET_ALL_PD","data","SET_FILTER_START_NOTICE_DATE","SET_FILTER_END_NOTICE_DATE","SET_FILTER_COUNTRY","SET_FILTER_CATEGORY","initPDFilters","pdsConvert","map","pd","nt","Date","sort","pd1","pd2","getTime","length","Array","from","Set","Loading","className","getDateString","d","getFullYear","getMonth","slice","getDate","join","timeInDay","timeInMonth","timeInYear","timespanToString","verbose","day","month","year","Math","floor","monthsInTime","leftTime","yearsInTime","getChartText","checkDate","message","note","val","PDFilter","useContext","startDate","endDate","htmlFor","id","defaultValue","min","max","onChange","evt","target","value","PDChart","svgRef","useRef","useEffect","current","svgWidth","window","innerWidth","svgHeight","innerHeight","margin","style","width","height","backgroundColor","chartWidth","chartHeight","filteredPD","filter","filterPD","console","log","xScale","d3","domain","range","res","pdDate","isNaN","yScale","y","svg","selectAll","remove","bisect","left","chart","append","attr","on","xPos","offsetX","dataX","invert","dataIdx","selectedData","focus","texts","focusText","text","xAxis","ticks","tickFormat","yAxis","call","valueOf","line","x","i","latestText","ref","PDView","Main","a","axios","get","resp","status","getAllPD","App","useReducer","Provider","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.db602eb5.chunk.js","sourcesContent":["export type PDType = {\r\n  nt: string,\r\n  cny: string,\r\n  cat: string,\r\n  pd: string\r\n};\r\n\r\nexport type PDTypeConvert = {\r\n  nt: Date,\r\n  cny: string,\r\n  cat: string,\r\n  pd: string\r\n}\r\nexport type PDFilter = {\r\n  ntRange: Date[],\r\n  cnys: string[],\r\n  cats: string[]\r\n}\r\n\r\nexport type PDCurrentFilter = {\r\n  ntRange: Date[],\r\n  cny: string,\r\n  cat: string\r\n}\r\n\r\nexport type ChartData = {\r\n  val: number,\r\n  note: string,\r\n  nt: Date,\r\n  pd: Date\r\n}\r\n\r\nexport type InitStateType = {\r\n  pds: PDTypeConvert[] | null,\r\n  pdFilter: PDFilter,\r\n  pdCurFilter: PDCurrentFilter\r\n};\r\n\r\nexport enum ActionType {\r\n  SET_ALL_PD,\r\n  SET_FILTER_START_NOTICE_DATE,\r\n  SET_FILTER_END_NOTICE_DATE,\r\n  SET_FILTER_COUNTRY,\r\n  SET_FILTER_CATEGORY\r\n};\r\n\r\nexport type Action = {\r\n  type: ActionType;\r\n  data: any;\r\n};\r\n","import {createContext, Dispatch} from 'react';\r\nimport {InitStateType, Action} from '../types';\r\n\r\nexport const initState: InitStateType = {\r\n  pds: null,\r\n  pdFilter: {\r\n    ntRange: [],\r\n    cnys: [],\r\n    cats: []\r\n  },\r\n  pdCurFilter: {\r\n    ntRange: [],\r\n    cny: '',\r\n    cat: ''\r\n  }\r\n};\r\n\r\nexport const Context = createContext<{\r\n  state: InitStateType,\r\n  dispatch: Dispatch<Action>\r\n}>({\r\n  state: initState,\r\n  dispatch: () => null\r\n});\r\n","import {ActionType, InitStateType, Action} from '../types';\r\n\r\nexport const Reducer = (state: InitStateType, action: Action) => {\r\n  switch (action.type) {\r\n    case ActionType.SET_ALL_PD: {\r\n      return {\r\n        ...state,\r\n        ...action.data\r\n      };\r\n    }\r\n    case ActionType.SET_FILTER_START_NOTICE_DATE: {\r\n      return {\r\n        ...state,\r\n        ...{\r\n          pdCurFilter: {\r\n            ...state.pdCurFilter,\r\n            ...{\r\n              ntRange: [action.data, state.pdCurFilter.ntRange[1]]\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case ActionType.SET_FILTER_END_NOTICE_DATE: {\r\n      return {\r\n        ...state,\r\n        ...{\r\n          pdCurFilter: {\r\n            ...state.pdCurFilter,\r\n            ...{\r\n              ntRange: [state.pdCurFilter.ntRange[0], action.data]\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case ActionType.SET_FILTER_COUNTRY: {\r\n      return {\r\n        ...state,\r\n        ...{\r\n          pdCurFilter: {\r\n            ...state.pdCurFilter,\r\n            ...{\r\n              cny: action.data\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case ActionType.SET_FILTER_CATEGORY: {\r\n      return {\r\n        ...state,\r\n        ...{\r\n          pdCurFilter: {\r\n            ...state.pdCurFilter,\r\n            ...{\r\n              cat: action.data\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import {PDType, PDTypeConvert, PDFilter, PDCurrentFilter, ChartData} from '../types'\r\n\r\nexport const initPDFilters = (pds: PDType[]): {pds: PDTypeConvert[], pdFilter: PDFilter, pdCurFilter: PDCurrentFilter} => {\r\n  const pdFilter: PDFilter = {\r\n    ntRange: [],\r\n    cnys: [],\r\n    cats: []\r\n  }\r\n  const pdCurFilter: PDCurrentFilter = {\r\n    ntRange: [],\r\n    cny: '',\r\n    cat: ''\r\n  }\r\n  // convert pd data notice date from string to date\r\n  const pdsConvert = pds.map(pd => ({\r\n    nt: new Date(`${pd.nt}T00:00:00`),\r\n    cny: pd.cny,\r\n    cat: pd.cat,\r\n    pd: pd.pd\r\n  }));\r\n  // sort pds\r\n  pdsConvert.sort((pd1, pd2) => pd1.nt.getTime() - pd2.nt.getTime());\r\n  pdFilter.ntRange = [pdsConvert[0].nt, pdsConvert[pdsConvert.length - 1].nt];\r\n  pdFilter.cnys = Array.from(new Set(pds.map(pd => pd.cny)));\r\n  pdFilter.cats = Array.from(new Set(pds.map(pd => pd.cat)));\r\n\r\n  pdCurFilter.ntRange = [pdsConvert[0].nt, pdsConvert[pdsConvert.length - 1].nt];\r\n  pdCurFilter.cny = pdFilter.cnys[0];\r\n  pdCurFilter.cat = pdFilter.cats[0];\r\n  return { pds:pdsConvert, pdFilter, pdCurFilter };\r\n}\r\n\r\nexport const filterPD = (pds: PDTypeConvert[], filter: PDCurrentFilter): PDTypeConvert[] => {\r\n  const {ntRange, cny, cat} = filter\r\n  return pds.filter(pd => pd.nt <= ntRange[1] && pd.nt >= ntRange[0] && pd.cny === cny && pd.cat === cat)\r\n}\r\n\r\nexport const paddingPD = (pds: PDTypeConvert[]): PDTypeConvert[] => {\r\n  if (pds.length === 0) {\r\n    return pds;\r\n  }\r\n  const minDate: PDTypeConvert = {...pds[0]}\r\n  const maxDate: PDTypeConvert = {...(pds.slice(-1)[0])}\r\n  minDate.pd = 'C'\r\n  minDate.nt.setMonth(minDate.nt.getMonth() - 1);\r\n  maxDate.pd = 'C'\r\n  maxDate.nt.setMonth(maxDate.nt.getMonth() + 1);\r\n  pds.unshift(minDate)\r\n  pds.push(maxDate);\r\n  return pds;\r\n}\r\n","import React from 'react';\r\nimport './loading.scss';\r\n\r\nconst Loading = () => {\r\n  return <div className='lds-facebook'>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n}\r\n\r\nexport default Loading;\r\n","import {ChartData} from '../types';\r\n\r\nexport const getDateString = (d: Date) => {\r\n  return [\r\n    d.getFullYear(),\r\n    ('0' + (d.getMonth() + 1)).slice(-2),\r\n    ('0' + d.getDate()).slice(-2)\r\n  ].join('-');\r\n}\r\n\r\nconst timeInDay = 24 * 3600 * 1000;\r\nconst timeInMonth = 30 * timeInDay;\r\nconst timeInYear = 12 * timeInMonth;\r\n\r\nexport const timespanToString = (d: number, verbose: boolean): string => {\r\n  const day = verbose ? ' Day ' : 'D';\r\n  const month = verbose ? ' Month ' : 'M';\r\n  const year = verbose ? ' Year ': 'Y';\r\n  if (d < timeInMonth) {\r\n    return `${Math.floor(d/timeInDay)}${day}`;\r\n  } else if (d < timeInYear) {\r\n    const monthsInTime = Math.floor(d/timeInMonth);\r\n    const leftTime = d - monthsInTime * timeInMonth;\r\n    return `${monthsInTime}${month}${timespanToString(leftTime, verbose)}`;\r\n  } else {\r\n    const yearsInTime = Math.floor(d/timeInYear);\r\n    const leftTime = d - yearsInTime * timeInYear;\r\n    return `${yearsInTime}${year}${timespanToString(leftTime, verbose)}`;\r\n  }\r\n}\r\n\r\nexport const getChartText = (data: ChartData) => {\r\n  const checkDate = getDateString(data.nt);\r\n  let pd = ''\r\n  let message = '';\r\n  if (data.note === 'C') {\r\n    pd = 'Priority Date: Current';\r\n    message = 'No need to wait';\r\n  } else if (data.note === 'U') {\r\n    pd = 'Priority Date: Unavailable';\r\n    message = 'Please wait...'\r\n  } else {\r\n    pd = `Priority Date: ${getDateString(data.pd)}`;\r\n    message = `You need to wait ${timespanToString(data.val, true)}`\r\n  }\r\n  return [checkDate, pd, message];\r\n}\r\n\r\n","import React, {useContext}  from 'react';\r\nimport {Context} from '../contexts/context';\r\nimport {getDateString} from '../utils/date-utils';\r\nimport {ActionType} from '../types';\r\nimport './pd-filter.scss';\r\n\r\nconst PDFilter = () => {\r\n  const {state, dispatch} = useContext(Context);\r\n  const [startDate, endDate] = state.pdFilter.ntRange;\r\n  const {cnys, cats} = state.pdFilter;\r\n  return <div className='filter-container'>\r\n    <div className='filter-control'>\r\n      <label htmlFor='date-from'>From:</label>\r\n      <input type='date' id='date-from' defaultValue={getDateString(new Date(startDate))}\r\n        min={getDateString(new Date(startDate))} max={getDateString(new Date(endDate))}\r\n        onChange={evt => dispatch({\r\n          type: ActionType.SET_FILTER_START_NOTICE_DATE,\r\n          data: new Date(`${evt.target.value}T00:00:00`).getTime()\r\n        })}\r\n      ></input>\r\n      <label htmlFor='date-to'>To:</label>\r\n      <input type='date' id='date-to' defaultValue={getDateString(new Date(endDate))}\r\n        min={getDateString(new Date(startDate))} max={getDateString(new Date(endDate))}\r\n        onChange={evt => dispatch({\r\n          type: ActionType.SET_FILTER_END_NOTICE_DATE,\r\n          data: new Date(`${evt.target.value}T00:00:00`).getTime()\r\n        })}\r\n      ></input>\r\n    </div>\r\n    <div className='filter-control'>\r\n      <label htmlFor='pd-country'>Region:</label>\r\n      <select id='pd-country'\r\n        onChange={evt => dispatch({\r\n          type: ActionType.SET_FILTER_COUNTRY,\r\n          data: evt.target.value\r\n        })}\r\n      >\r\n        {cnys.map(cny => <option value={cny} key={`pd-country-${cny}`}>{cny}</option>)}\r\n      </select>\r\n    </div>\r\n    <div className='filter-control'>\r\n      <label htmlFor='pd-category'>Category:</label>\r\n      <select id='pd-category'\r\n        onChange={evt => dispatch({\r\n          type: ActionType.SET_FILTER_CATEGORY,\r\n          data: evt.target.value\r\n        })}\r\n      >\r\n        {cats.map(cat => <option value={cat} key={`pd-category-${cat}`}>{cat}</option>)}\r\n      </select>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default PDFilter;\r\n","import React, {useContext, useRef, useEffect} from 'react';\r\nimport {Context} from '../contexts/context';\r\nimport {filterPD} from '../utils/data-utils';\r\nimport {timespanToString, getDateString, getChartText} from '../utils/date-utils';\r\nimport {ChartData} from '../types';\r\nimport * as d3 from 'd3';\r\n\r\nconst PDChart = () => {\r\n  const {state} = useContext(Context);\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!svgRef.current || !state.pds) {\r\n      return;\r\n    }\r\n    const current = svgRef.current as HTMLElement\r\n    const svgWidth = window.innerWidth * 0.9;\r\n    const svgHeight = window.innerHeight * 0.8;\r\n    const margin = {\r\n      top: 100,\r\n      right: 10,\r\n      bottom: 30,\r\n      left: 70\r\n    };\r\n    current.style.width = `${svgWidth}px`;\r\n    current.style.height = `${svgHeight}px`;\r\n    current.style.backgroundColor = 'slategrey';\r\n    const chartWidth = svgWidth - margin.left - margin.right;\r\n    const chartHeight = svgHeight - margin.top - margin.bottom;\r\n\r\n    const filteredPD = filterPD(state.pds, state.pdCurFilter);\r\n    \r\n    console.log(filteredPD, state.pdCurFilter);\r\n    \r\n    const xScale = d3.scaleTime()\r\n    .domain(state.pdCurFilter.ntRange)\r\n    .range([0, chartWidth])\r\n\r\n    const data: ChartData[] = filteredPD.map(pd => {\r\n      const res = {\r\n        val: 1000,\r\n        note: '',\r\n        nt: pd.nt,\r\n        pd: new Date()\r\n      };\r\n      if (pd.pd === 'C' || pd.pd === 'U') {\r\n        res.note = pd.pd\r\n      } else {\r\n        const pdDate = new Date(`${pd.pd}T00:00:00`);\r\n        if (isNaN(pdDate.getTime())) {\r\n          res.note = 'NAN';\r\n        } else {\r\n          res.val = res.nt.getTime() - pdDate.getTime();\r\n          res.pd = pdDate;\r\n        }\r\n      }\r\n      return res;\r\n    });\r\n\r\n    const yScale = d3.scaleLinear()\r\n    .domain([0, d3.max(data, y => y.val)!])\r\n    .range([chartHeight, 0]);\r\n    \r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove()\r\n\r\n    const bisect = d3.bisector<ChartData, Date>(d => {\r\n      return d.nt\r\n    }).left;\r\n\r\n    // chart area\r\n    const chartRect = svg\r\n    .append('rect')\r\n    .style('fill', 'none')\r\n    .style('pointer-events', 'all')\r\n    .attr('class', 'pd-chart-area')\r\n    .attr('width', chartWidth)\r\n    .attr('height', chartHeight)\r\n    .attr('transform', `translate(${margin.left},${margin.top})`)\r\n    .on('mousemove', (evt) => {\r\n      const xPos = evt.offsetX - margin.left;\r\n      const dataX = xScale.invert(xPos);\r\n      const dataIdx = bisect(data, dataX, 1);\r\n      const selectedData = data[dataIdx];\r\n      if (!selectedData) {\r\n        return;\r\n      }\r\n      focus\r\n      .attr('cx', xScale(selectedData.nt) + margin.left)\r\n      .attr('cy', yScale(selectedData.val) + margin.top)\r\n\r\n      const texts = getChartText(selectedData);\r\n      //focusText\r\n      //.attr('x', xScale(selectedData.nt) + margin.left - 20)\r\n      //.attr('y', yScale(selectedData.val) + margin.top - 60);\r\n\r\n      focusText.selectAll('.sub-text')\r\n      .data(texts)\r\n      .text(d => d)\r\n      //.attr('x', xScale(selectedData.nt) + margin.left - 20)\r\n\r\n    })\r\n    .on('mouseout', () => {\r\n      focus.style('opacity', 0);\r\n      focusText.style('opacity', 0);\r\n    })\r\n    .on('mouseover', () => {\r\n      focus.style('opacity', 1);\r\n      focusText.style('opacity', 1);\r\n    })\r\n\r\n    const chart = svg.append('g')\r\n    .attr('class', 'pd-chart')\r\n    .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    // Add X grid lines with labels\r\n    const xAxis = d3.axisBottom<Date>(xScale)\r\n    .ticks(d3.timeYear)\r\n    .tickFormat(d3.timeFormat('%Y'))\r\n    const xAxisGroup = svg.append('g')\r\n    .attr('transform', `translate(${margin.left}, ${chartHeight + margin.top})`)\r\n    .call(xAxis);\r\n\r\n    // Add Y grid lines with labels\r\n    const yAxis = d3.axisLeft(yScale)\r\n    .tickFormat(d => timespanToString(d.valueOf(), false))\r\n\r\n    const yAxisGroup = svg.append('g').call(yAxis)\r\n    .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    const line = d3.line<ChartData>()\r\n    .x(d => xScale(d.nt))\r\n    .y(d => yScale(d.val))\r\n\r\n    chart.append('path')\r\n    .attr('stroke-width', 1.5)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', 'bisque')\r\n    .attr('d', line(data));\r\n\r\n    const focus = svg\r\n    .append('g')\r\n    .append('circle')\r\n    .style('fill', 'red')\r\n    .attr('stroke', 'red')\r\n    .attr('r', 3)\r\n    .style('opacity', 0)\r\n\r\n    const focusText = svg\r\n    .append('g')\r\n    .append('text')\r\n    .style('opacity', 0)\r\n    .style('fill', 'white')\r\n    .attr('x', margin.left + 20)\r\n    .attr('y', margin.top + 20)\r\n    .attr('text-anchor', 'left')\r\n    .attr('alignment-baseline', 'middle')\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      focusText.append('tspan')\r\n      .attr('class', 'sub-text')\r\n      .attr('x', margin.left + 20)\r\n      .attr('dy', '1em');\r\n    }\r\n\r\n    const latestText = getChartText(data.slice(-1)[0]);\r\n    const captionText = svg\r\n    .append('g')\r\n    .append('text')\r\n    .style('fill', 'white')\r\n    .style('font-size', '3em')\r\n    .attr('x', 150)\r\n    .attr('y', 60)\r\n    .text(`From the latest data, ${latestText[1]}`)\r\n    \r\n    \r\n  }, [svgRef, state.pdCurFilter, state.pds, state.pdFilter])\r\n  return <div>\r\n    <svg ref={svgRef} className='svg-container'></svg>\r\n  </div>\r\n}\r\n\r\nexport default PDChart;\r\n","import React from 'react';\r\nimport PDFilter from './pd-filter';\r\nimport PDChart from './pd-chart';\r\n\r\nconst PDView = () => {\r\n  return <div>\r\n    <PDFilter />\r\n    <PDChart />\r\n  </div>\r\n}\r\n\r\nexport default PDView;\r\n","import React, { useContext } from 'react';\r\nimport { useEffect } from 'react';\r\nimport {Context} from '../contexts/context';\r\nimport {ActionType} from '../types';\r\nimport {initPDFilters} from '../utils/data-utils';\r\nimport Loading from './loading';\r\nimport PDView from './pd-view';\r\nimport axios from 'axios';\r\n\r\nconst Main = () => {\r\n  const {state, dispatch} = useContext(Context);\r\n\r\n  useEffect(() => {\r\n    const getAllPD = async () => {\r\n      const resp = await axios.get('/api/all_pd');\r\n      if (resp.status === 200 && resp.data) {\r\n        dispatch({\r\n          type: ActionType.SET_ALL_PD,\r\n          data: {...initPDFilters(resp.data)}\r\n        });\r\n      }\r\n    }\r\n    getAllPD();\r\n  }, [dispatch]);\r\n\r\n  return (<div>\r\n    { state.pds === null ? <Loading /> : <PDView />}\r\n  </div>);\r\n}\r\n\r\nexport default Main;\r\n","import React, {useReducer} from 'react';\nimport {Context, initState} from './contexts/context';\nimport {Reducer} from './contexts/reducer';\n\nimport Main from './components/main';\nimport './App.scss';\nfunction App() {\n  const [state, dispatch] = useReducer(Reducer, initState);\n\n  return (\n    <Context.Provider value={{\n      state,\n      dispatch\n    }}>\n      <div className=\"App\">\n        <Main />\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}