{"version":3,"sources":["types.ts","contexts/context.ts","contexts/reducer.ts","utils/data-utils.ts","components/loading.tsx","utils/date-utils.ts","assets/close.svg","components/pd-setting-modal.tsx","assets/settings.svg","components/pd-filter.tsx","components/pd-chart.tsx","components/pd-view.tsx","components/main.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ActionType","SWMessageType","initState","pds","pdFilter","ntStart","Date","ntEnd","cnys","cats","pdCurFilter","curNtStart","curNtEnd","cny","cat","controls","setting","mypd","Context","createContext","state","dispatch","Reducer","action","type","SET_ALL_PD","data","SET_FILTER_START_NOTICE_DATE","SET_FILTER_END_NOTICE_DATE","SET_FILTER_COUNTRY","navigator","serviceWorker","controller","postMessage","SET_DB_FILTER_COUNTRY","SET_FILTER_CATEGORY","SET_DB_FILTER_CATEGORY","CONTROL_SETTING_SHOW","stateUpdate","CONTROL_SETTING_HIDE","SET_MY_PD","SET_DB_MY_PD","initPDFilters","pdsConvert","map","pd","nt","sort","pd1","pd2","getTime","length","Array","from","Set","Loading","className","getDateString","d","getFullYear","getMonth","slice","getDate","join","timeInDay","timeInMonth","timeInYear","timespanToString","verbose","day","month","year","Math","floor","monthsInTime","leftTime","yearsInTime","getChartText","checkDate","message","note","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","id","SvgClose","_ref","svgRef","title","titleId","props","fill","xmlns","width","height","viewBox","ref","ForwardRef","PDSettingModal","useContext","onClick","htmlFor","defaultValue","onChange","evt","value","SvgSettings","PDFilter","useState","min","max","updatedDate","c","selected","PDChart","useRef","useEffect","current","svgWidth","window","innerWidth","svgHeight","innerHeight","margin","style","backgroundColor","chartWidth","chartHeight","filteredPD","filter","filterPD","xScale","d3","domain","range","res","val","pdDate","isNaN","yScale","y","svg","selectAll","remove","bisect","left","chart","append","attr","on","xPos","offsetX","dataX","invert","dataIdx","selectedData","focus","texts","focusText","text","xAxis","ticks","tickFormat","yAxis","valueOf","line","x","captionText","mypdText","waitText","PDView","href","Main","getAllPD","a","axios","get","resp","status","addEventListener","event","SEND_PAGE_INIT_DATA","dataFromRequest","dataFromSW","PAGE_LOADS","App","useReducer","Provider","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","contentType","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","info"],"mappings":"qPA4CYA,EAgBAC,E,iDCzDCC,EAA2B,CACtCC,IAAK,KACLC,SAAU,CACRC,QAAS,IAAIC,KACbC,MAAO,IAAID,KACXE,KAAM,GACNC,KAAM,IAERC,YAAa,CACXC,WAAY,IAAIL,KAChBM,SAAU,IAAIN,KACdO,IAAK,GACLC,IAAK,IAEPC,SAAU,CACRC,SAAS,GAEXC,KAAM,GAGKC,EAAUC,wBAGpB,CACDC,MAAOlB,EACPmB,SAAU,kBAAM,Q,iBDgBNrB,O,2BAAAA,I,+DAAAA,I,2DAAAA,I,2CAAAA,I,6CAAAA,I,+CAAAA,I,+CAAAA,I,0BAAAA,M,cAgBAC,O,2BAAAA,I,6CAAAA,I,+BAAAA,I,iDAAAA,I,oDAAAA,M,KE1DL,IAAMqB,EAAU,SAACF,EAAsBG,GAC5C,OAAQA,EAAOC,MACb,KAAKxB,EAAWyB,WACd,OAAO,2BACFL,GACAG,EAAOG,MAGd,KAAK1B,EAAW2B,6BACd,OAAO,2BACFP,GACA,CACDV,YAAY,2BACPU,EAAMV,aACN,CACDC,WAAYY,EAAOG,SAM7B,KAAK1B,EAAW4B,2BACd,OAAO,2BACFR,GACA,CACDV,YAAY,2BACPU,EAAMV,aACN,CACDE,SAAUW,EAAOG,SAM3B,KAAK1B,EAAW6B,mBAAqB,IAAD,EAElC,OADA,UAAAC,UAAUC,cAAcC,kBAAxB,SAAoCC,YAAY,CAACT,KAAMvB,EAAciC,sBAAuBR,KAAMH,EAAOG,OAClG,2BACFN,GACA,CACDV,YAAY,2BACPU,EAAMV,aACN,CACDG,IAAKU,EAAOG,SAMtB,KAAK1B,EAAWmC,oBAAsB,IAAD,EAEnC,OADA,UAAAL,UAAUC,cAAcC,kBAAxB,SAAoCC,YAAY,CAACT,KAAMvB,EAAcmC,uBAAwBV,KAAMH,EAAOG,OACnG,2BACFN,GACA,CACDV,YAAY,2BACPU,EAAMV,aACN,CACDI,IAAKS,EAAOG,SAMtB,KAAK1B,EAAWqC,qBACd,IAAMC,EAAW,eACZlB,GAGL,OADAkB,EAAYvB,SAASC,SAAU,EACxBsB,EAET,KAAKtC,EAAWuC,qBACd,IAAMD,EAAW,eACZlB,GAGL,OADAkB,EAAYvB,SAASC,SAAU,EACxBsB,EAET,KAAKtC,EAAWwC,UAAY,IAAD,EACnBF,EAAW,eACZlB,GAIL,OAFAkB,EAAYrB,KAAOM,EAAOG,KAC1B,UAAAI,UAAUC,cAAcC,kBAAxB,SAAoCC,YAAY,CAACT,KAAMvB,EAAcwC,aAAcf,KAAMH,EAAOG,OACzFY,EAET,QACE,OAAOlB,I,wBCrFAsB,EAAgB,SAACvC,GAC5B,IAAMC,EAAqB,CACzBC,QAAS,IAAIC,KACbC,MAAO,IAAID,KACXE,KAAM,GACNC,KAAM,IAEFC,EAA+B,CACnCC,WAAY,IAAIL,KAChBM,SAAU,IAAIN,KACdO,IAAK,GACLC,IAAK,IAGD6B,EAAaxC,EAAIyC,KAAI,SAAAC,GAAE,MAAK,CAChCC,GAAI,IAAIxC,KAAJ,UAAYuC,EAAGC,GAAf,cACJjC,IAAKgC,EAAGhC,IACRC,IAAK+B,EAAG/B,IACR+B,GAAIA,EAAGA,OAaT,OAVAF,EAAWI,MAAK,SAACC,EAAKC,GAAN,OAAcD,EAAIF,GAAGI,UAAYD,EAAIH,GAAGI,aACxD9C,EAASC,QAAUsC,EAAW,GAAGG,GACjC1C,EAASG,MAASoC,EAAWA,EAAWQ,OAAS,GAAGL,GACpD1C,EAASI,KAAO4C,MAAMC,KAAK,IAAIC,IAAInD,EAAIyC,KAAI,SAAAC,GAAE,OAAIA,EAAGhC,SACpDT,EAASK,KAAO2C,MAAMC,KAAK,IAAIC,IAAInD,EAAIyC,KAAI,SAAAC,GAAE,OAAIA,EAAG/B,SAEpDJ,EAAYC,WAAagC,EAAW,GAAGG,GACvCpC,EAAYE,SAAW+B,EAAWA,EAAWQ,OAAS,GAAGL,GACzDpC,EAAYG,IAAMT,EAASI,KAAK,GAChCE,EAAYI,IAAMV,EAASK,KAAK,GACzB,CAAEN,IAAIwC,EAAYvC,WAAUM,gB,gBCtBtB6C,EARC,WACd,OAAO,sBAAKC,UAAU,eAAf,UACL,wBACA,wBACA,4BCLSC,EAAgB,SAACC,GAC5B,MAAO,CACLA,EAAEC,eACD,KAAOD,EAAEE,WAAa,IAAIC,OAAO,IACjC,IAAMH,EAAEI,WAAWD,OAAO,IAC3BE,KAAK,MAGIC,EAAY,MACZC,EAAc,OACdC,EAAa,QAEbC,EAAmB,SAAnBA,EAAoBT,EAAWU,GAC1C,IAAMC,EAAMD,EAAU,QAAU,IAC1BE,EAAQF,EAAU,UAAY,IAC9BG,EAAOH,EAAU,SAAU,IACjC,GAAIV,EAAIO,EACN,MAAM,GAAN,OAAUO,KAAKC,MAAMf,EAAEM,IAAvB,OAAoCK,GAC/B,GAAIX,EAAIQ,EAAY,CACzB,IAAMQ,EAAeF,KAAKC,MAAMf,EAAEO,GAC5BU,EAAWjB,EAAIgB,EAAeT,EACpC,MAAM,GAAN,OAAUS,GAAV,OAAyBJ,GAAzB,OAAiCH,EAAiBQ,EAAUP,IAE5D,IAAMQ,EAAcJ,KAAKC,MAAMf,EAAEQ,GAC3BS,EAAWjB,EAAIkB,EAAcV,EACnC,MAAM,GAAN,OAAUU,GAAV,OAAwBL,GAAxB,OAA+BJ,EAAiBQ,EAAUP,KAIjDS,EAAe,SAACnD,EAAiBT,GAC5C,IAAKS,EACH,MAAO,CAAC,MAAM,MAAM,OAEtB,IAAMoD,EAAYrB,EAAc/B,EAAKoB,IACjCD,EAAK,GACLkC,EAAU,GAYd,MAXkB,MAAdrD,EAAKsD,MACPnC,EAAK,yBACLkC,EAAU,mBACa,MAAdrD,EAAKsD,MACdnC,EAAK,6BACLkC,EAAU,gCAEVlC,EAAE,yBAAqBY,EAAc/B,EAAKmB,KAE1CkC,EAAO,uBAAmBZ,EAAiBlD,EAAOS,EAAKmB,GAAGK,WAAW,KAEhE,CAAC4B,EAAWjC,EAAIkC,ICjDzB,SAASE,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUnC,OAAQkC,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAIG,KAAOD,EAAcL,OAAOO,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQJ,EAAOI,GAAOD,EAAOC,IAAY,OAAOJ,IAA2BQ,MAAMC,KAAMP,WAEhT,SAASQ,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKH,EAAnED,EAEzF,SAAuCG,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKH,EAA5DD,EAAS,GAAQY,EAAad,OAAOe,KAAKV,GAAqB,IAAKF,EAAI,EAAGA,EAAIW,EAAW7C,OAAQkC,IAAOG,EAAMQ,EAAWX,GAAQU,EAASG,QAAQV,IAAQ,IAAaJ,EAAOI,GAAOD,EAAOC,IAAQ,OAAOJ,EAFxMe,CAA8BZ,EAAQQ,GAAuB,GAAIb,OAAOkB,sBAAuB,CAAE,IAAIC,EAAmBnB,OAAOkB,sBAAsBb,GAAS,IAAKF,EAAI,EAAGA,EAAIgB,EAAiBlD,OAAQkC,IAAOG,EAAMa,EAAiBhB,GAAQU,EAASG,QAAQV,IAAQ,GAAkBN,OAAOO,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBJ,EAAOI,GAAOD,EAAOC,IAAU,OAAOJ,EAMne,IAAI,EAAqB,gBAAoB,OAAQ,CACnDmB,GAAI,IACJ7C,EAAG,wJAGL,SAAS8C,EAASC,EAAMC,GACtB,IAAIC,EAAQF,EAAKE,MACbC,EAAUH,EAAKG,QACfC,EAAQf,EAAyBW,EAAM,CAAC,QAAS,YAErD,OAAoB,gBAAoB,MAAOxB,EAAS,CACtD6B,KAAM,UACNC,MAAO,6BACPC,MAAO,GACPC,OAAQ,GACRC,QAAS,YACTC,IAAKT,EACL,kBAAmBE,GAClBC,GAAQF,EAAqB,gBAAoB,QAAS,CAC3DJ,GAAIK,GACHD,GAAS,KAAM,GAGpB,IAAIS,EAA0B,aAAiBZ,GCShCa,GDRA,I,OCxBQ,WAAO,IAAD,EACDC,qBAAWpG,GAA9BE,EADoB,EACpBA,MAAOC,EADa,EACbA,SAORJ,EAAOG,EAAMH,KAAO,EAAI,IAAIX,KAAKc,EAAMH,MAAQ,IAAIX,KACzD,OAAO,gCACL,qBAAKkD,UAAU,6BACf,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,6BAA6B+D,QAV7B,WACjBlG,EAAS,CACPG,KAAMxB,EAAWuC,qBACjBb,KAAM,MAON,SACE,cAAC,EAAD,MAEF,qBAAK8B,UAAU,4BAAf,SACE,sBAAKA,UAAU,2BAAf,UACE,uBAAOgE,QAAQ,aAAf,wCACA,uBAAOhG,KAAK,OAAO+E,GAAG,aAAakB,aAAchE,EAAcxC,GAC7DyG,SAAU,SAAAC,GACRtG,EAAS,CACPG,KAAMxB,EAAWwC,UACjBd,KAAM,IAAIpB,KAAJ,UAAYqH,EAAIvC,OAAOwC,MAAvB,cAAyC1E,4B,OC9B/D,SAAS,IAA2Q,OAA9P,EAAWgC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUnC,OAAQkC,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAIG,KAAOD,EAAcL,OAAOO,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQJ,EAAOI,GAAOD,EAAOC,IAAY,OAAOJ,IAA2BQ,MAAMC,KAAMP,WAEhT,SAAS,EAAyBC,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKH,EAAnED,EAEzF,SAAuCG,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKH,EAA5DD,EAAS,GAAQY,EAAad,OAAOe,KAAKV,GAAqB,IAAKF,EAAI,EAAGA,EAAIW,EAAW7C,OAAQkC,IAAOG,EAAMQ,EAAWX,GAAQU,EAASG,QAAQV,IAAQ,IAAaJ,EAAOI,GAAOD,EAAOC,IAAQ,OAAOJ,EAFxM,CAA8BG,EAAQQ,GAAuB,GAAIb,OAAOkB,sBAAuB,CAAE,IAAIC,EAAmBnB,OAAOkB,sBAAsBb,GAAS,IAAKF,EAAI,EAAGA,EAAIgB,EAAiBlD,OAAQkC,IAAOG,EAAMa,EAAiBhB,GAAQU,EAASG,QAAQV,IAAQ,GAAkBN,OAAOO,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBJ,EAAOI,GAAOD,EAAOC,IAAU,OAAOJ,EAMne,IAAI,EAAqB,gBAAoB,OAAQ,CACnD1B,EAAG,4iHAGL,SAASmE,EAAYpB,EAAMC,GACzB,IAAIC,EAAQF,EAAKE,MACbC,EAAUH,EAAKG,QACfC,EAAQ,EAAyBJ,EAAM,CAAC,QAAS,YAErD,OAAoB,gBAAoB,MAAO,EAAS,CACtDK,KAAM,UACNC,MAAO,6BACPG,QAAS,YACTF,MAAO,OACPC,OAAQ,OACRE,IAAKT,EACL,kBAAmBE,GAClBC,GAAQF,EAAqB,gBAAoB,QAAS,CAC3DJ,GAAIK,GACHD,GAAS,KAAM,GAGpB,IAAI,EAA0B,aAAiBkB,GCmDhCC,GDlDA,ICvBE,WAAO,IAAD,EACKR,qBAAWpG,GAA9BE,EADc,EACdA,MAAOC,EADO,EACPA,SADO,EAEiB0G,oBAAS,GAF1B,gCAIgB3G,EAAMhB,UAApCC,EAJc,EAIdA,QAASE,EAJK,EAILA,MAAOC,EAJF,EAIEA,KAAMC,EAJR,EAIQA,KAJR,EAMoBW,EAAMV,YAAxCC,EANc,EAMdA,WAAYC,EANE,EAMFA,SAAUC,EANR,EAMQA,IAAKC,EANb,EAMaA,IAE3BC,EAAYK,EAAZL,SASP,OAAO,sBAAKyC,UAAU,mBAAf,UACL,sBAAKA,UAAU,iBAAf,UACE,uBAAOgE,QAAQ,YAAf,mBACA,uBAAOhG,KAAK,OAAO+E,GAAG,YAAYkB,aAAchE,EAAc,IAAInD,KAAKK,IACrEqH,IAAKvE,EAAc,IAAInD,KAAKD,IAAW4H,IAAKxE,EAAc,IAAInD,KAAKC,IACnEmH,SAAU,SAAAC,GACR,IAAMO,EAAc,IAAI5H,KAAJ,UAAYqH,EAAIvC,OAAOwC,MAAvB,cAAyC1E,UAC7D7B,EAAS,CACPG,KAAMxB,EAAW2B,6BACjBD,KAAMwG,OAIZ,uBAAOV,QAAQ,UAAf,iBACA,uBAAOhG,KAAK,OAAO+E,GAAG,UAAUkB,aAAchE,EAAc,IAAInD,KAAKM,IACnEoH,IAAKvE,EAAc,IAAInD,KAAKD,IAAW4H,IAAKxE,EAAc,IAAInD,KAAKC,IACnEmH,SAAU,SAAAC,GACR,IAAMO,EAAc,IAAI5H,KAAJ,UAAYqH,EAAIvC,OAAOwC,MAAvB,cAAyC1E,UAC7D7B,EAAS,CACPG,KAAMxB,EAAW4B,2BACjBF,KAAMwG,UAKd,sBAAK1E,UAAU,iBAAf,UACE,uBAAOgE,QAAQ,aAAf,qBACA,wBAAQjB,GAAG,aACTmB,SAAU,SAAAC,GAAG,OAAItG,EAAS,CACxBG,KAAMxB,EAAW6B,mBACjBH,KAAMiG,EAAIvC,OAAOwC,SAHrB,SAMGpH,EAAKoC,KAAI,SAAAuF,GAAC,OAAI,wBAAQP,MAAOO,EAA2BC,SAAUD,GAAKtH,EAAzD,SAA+DsH,GAA/D,qBAAqCA,YAGxD,sBAAK3E,UAAU,iBAAf,UACE,uBAAOgE,QAAQ,cAAf,uBACA,wBAAQjB,GAAG,cACTmB,SAAU,SAAAC,GAAG,OAAItG,EAAS,CACxBG,KAAMxB,EAAWmC,oBACjBT,KAAMiG,EAAIvC,OAAOwC,SAHrB,SAMGnH,EAAKmC,KAAI,SAAAuF,GAAC,OAAI,wBAAQP,MAAOO,EAA4BC,SAAUD,GAAKrH,EAA1D,SAAgEqH,GAAhE,sBAAsCA,YAGzD,qBAAK3E,UAAU,iBAAf,SACE,wBAAQA,UAAU,WAAW+D,QAvDV,WACrBlG,EAAS,CACPG,KAAMxB,EAAWqC,qBACjBX,KAAM,MAoDN,SACE,cAAC,EAAD,QAGFX,EAASC,QAAU,cAAC,EAAD,IAAqB,kC,OCiH/BqH,EAvLC,WAAO,IACdjH,EAASkG,qBAAWpG,GAApBE,MACDsF,EAAS4B,iBAAO,MAgLtB,OA9KAC,qBAAU,WAAO,IACRpI,EAA2BiB,EAA3BjB,IAAKO,EAAsBU,EAAtBV,YAAaO,EAASG,EAATH,KACzB,GAAKyF,EAAO8B,SAAYrI,EAAxB,CAGA,IAAMqI,EAAU9B,EAAO8B,QACjBC,EAA+B,GAApBC,OAAOC,WAClBC,EAAiC,GAArBF,OAAOG,YACnBC,EACC,GADDA,EAEG,GAFHA,EAGI,GAHJA,EAIE,GAERN,EAAQO,MAAM/B,MAAd,UAAyByB,EAAzB,MACAD,EAAQO,MAAM9B,OAAd,UAA0B2B,EAA1B,MACAJ,EAAQO,MAAMC,gBAAkB,YAChC,IAAMC,EAAaR,EAAWK,EAAcA,EACtCI,EAAcN,EAAYE,EAAaA,EACvCK,EPMc,SAAChJ,EAAsBiJ,GAA8C,IACpFzI,EAAkCyI,EAAlCzI,WAAYC,EAAsBwI,EAAtBxI,SAAUC,EAAYuI,EAAZvI,IAAKC,EAAOsI,EAAPtI,IAClC,OAAOX,EAAIiJ,QAAO,SAAAvG,GAAE,OAAIA,EAAGC,IAAMlC,GAAYiC,EAAGC,IAAMnC,GAAckC,EAAGhC,MAAQA,GAAOgC,EAAG/B,MAAQA,KOR5EuI,CAASlJ,EAAKO,GAC3B4I,EAASC,MACdC,OAAO,CAAC9I,EAAYC,WAAYD,EAAYE,WAC5C6I,MAAM,CAAC,EAAGR,IAELvH,EAAoByH,EAAWvG,KAAI,SAAAC,GACvC,IAAM6G,EAAM,CACVC,IAAK,IACL3E,KAAM,GACNlC,GAAID,EAAGC,GACPD,GAAI,IAAIvC,MAEV,GAAc,MAAVuC,EAAGA,IAAwB,MAAVA,EAAGA,GACtB6G,EAAI1E,KAAOnC,EAAGA,OACT,CACL,IAAM+G,EAAS,IAAItJ,KAAJ,UAAYuC,EAAGA,GAAf,cACXgH,MAAMD,EAAO1G,WACfwG,EAAI1E,KAAO,OAEX0E,EAAIC,IAAMD,EAAI5G,GAAGI,UAAY0G,EAAO1G,UACpCwG,EAAI7G,GAAK+G,GAGb,OAAOF,KAGHI,EAASP,MACdC,OAAO,CAAC,EAAGD,IAAO7H,GAAM,SAAAqI,GAAC,OAAIA,EAAEJ,SAC/BF,MAAM,CAACP,EAAa,IAEfc,EAAMT,IAAU7C,EAAO8B,SAC7BwB,EAAIC,UAAU,KAAKC,SAEnB,IAAMC,EAASZ,KAA6B,SAAA7F,GAC1C,OAAOA,EAAEZ,MACRsH,KA2CGC,GAxCYL,EACjBM,OAAO,QACPvB,MAAM,OAAQ,QACdA,MAAM,iBAAkB,OACxBwB,KAAK,QAAS,iBACdA,KAAK,QAAStB,GACdsB,KAAK,SAAUrB,GACfqB,KAAK,YAPY,oBAOczB,EAPd,YAO6BA,EAP7B,MAQjB0B,GAAG,aAAa,SAAC7C,GAChB,IAAM8C,EAAO9C,EAAI+C,QAAU5B,EACrB6B,EAAQrB,EAAOsB,OAAOH,GACtBI,EAAUV,EAAOzI,EAAMiJ,EAAO,GAC9BG,EAAepJ,EAAKmJ,GAC1B,GAAKC,EAAL,CAGAC,EACCR,KAAK,KAAMjB,EAAOwB,EAAahI,IAAMgG,GACrCyB,KAAK,KAAMT,EAAOgB,EAAanB,KAAOb,GAEvC,IAAMkC,EAAQnG,EAAaiG,EAAc,GAKzCG,EAAUhB,UAAU,aACnBvI,KAAKsJ,GACLE,MAAK,SAAAxH,GAAC,OAAIA,SAIZ8G,GAAG,YAAY,WACdO,EAAMhC,MAAM,UAAW,GACvBkC,EAAUlC,MAAM,UAAW,MAE5ByB,GAAG,aAAa,WACfO,EAAMhC,MAAM,UAAW,GACvBkC,EAAUlC,MAAM,UAAW,MAGfiB,EAAIM,OAAO,KACxBC,KAAK,QAAS,YACdA,KAAK,YAFQ,oBAEkBzB,EAFlB,YAEiCA,EAFjC,OAKRqC,EAAQ5B,IAAoBD,GACjC8B,MAAM7B,KACN8B,WAAW9B,IAAc,OAMpB+B,GALatB,EAAIM,OAAO,KAC7BC,KAAK,YADa,oBACazB,EADb,aAC6BI,EAAcJ,EAD3C,MAElBnD,KAAKwF,GAGQ5B,IAAYO,GACzBuB,YAAW,SAAA3H,GAAC,OAAIc,KAAKC,MAAMf,EAAE6H,UAAYvH,GAAa,OAKjDwH,GAHaxB,EAAIM,OAAO,KAAK3E,KAAK2F,GACvCf,KAAK,YADa,oBACazB,EADb,aAC6BA,EAD7B,MAGNS,MACZkC,GAAE,SAAA/H,GAAC,OAAI4F,EAAO5F,EAAEZ,OAChBiH,GAAE,SAAArG,GAAC,OAAIoG,EAAOpG,EAAEiG,SAEjBU,EAAMC,OAAO,QACZC,KAAK,eAAgB,KACrBA,KAAK,OAAQ,QACbA,KAAK,SAAU,UACfA,KAAK,IAAKiB,EAAK9J,IAoBhB,IAlBA,IAAMqJ,EAAQf,EACbM,OAAO,KACPA,OAAO,UACPvB,MAAM,OAAQ,OACdwB,KAAK,SAAU,OACfA,KAAK,IAAK,GACVxB,MAAM,UAAW,GAEZkC,EAAYjB,EACjBM,OAAO,KACPA,OAAO,QACPvB,MAAM,UAAW,GACjBA,MAAM,OAAQ,SACdwB,KAAK,IAAKzB,EAAc,IACxByB,KAAK,IAAKzB,EAAa,IACvByB,KAAK,cAAe,QACpBA,KAAK,qBAAsB,UAEnBlF,EAAI,EAAGA,EAAI,EAAGA,IACrB4F,EAAUX,OAAO,SAChBC,KAAK,QAAS,YACdA,KAAK,IAAKzB,EAAc,IACxByB,KAAK,KAAM,OAGd,IAAImB,EAAc,GAClB,GAAIzK,EAAM,CACR,IAAM0K,EAAWlI,EAAc,IAAInD,KAAKW,IAClC2K,EAAW/G,EAAanD,EAAKmC,OAAO,GAAG,GAAI5C,GAAM,GACvDyK,EAAW,mBAAeC,EAAf,aAA4BC,GAEzB5B,EACfM,OAAO,KACPA,OAAO,QACPvB,MAAM,OAAQ,SACdA,MAAM,YAAa,OACnBwB,KAAK,IAAK,IACVA,KAAK,IAAK,IACVW,KAAKQ,GAEa1B,EAClBM,OAAO,KACPA,OAAO,QACPvB,MAAM,OAAQ,SACdA,MAAM,YAAa,OACnBwB,KAAK,YALa,wBAKiB3B,EAAY,EAL7B,kBAMlBsC,KAAK,mBACL,CAACxE,EAAQtF,EAAMV,YAAaU,EAAMjB,IAAKiB,EAAMH,OACzC,8BACL,qBAAKkG,IAAKT,EAAQlD,UAAU,qBCzKjBqI,G,OAZA,WACb,OAAO,sBAAKrI,UAAU,UAAf,UACL,mFACmD,mBAC/CsI,KAAK,gFACL1G,OAAO,SAFwC,kBADnD,OAKA,cAAC,EAAD,IACA,cAAC,EAAD,S,iBCgDW2G,EApDF,WAAO,IAAD,EACSzE,qBAAWpG,GAA9BE,EADU,EACVA,MAAOC,EADG,EACHA,SA8Cd,OA5CAkH,qBAAU,WAAO,IAAD,EACRyD,EAAQ,uCAAG,4BAAAC,EAAA,sEACIC,IAAMC,IAAI,eADd,UAEK,OADdC,EADS,QAENC,SAAkBD,EAAK1K,KAFjB,yCAGNgB,EAAc0J,EAAK1K,OAHb,gCAKN,CACLhB,YAAa,OANF,2CAAH,qDAWdoB,UAAUC,cAAcuK,iBAAiB,UAAzC,uCAAoD,WAAOC,GAAP,mBAAAN,EAAA,yDAC7CM,EAAM7K,KADuC,sDAI1C6K,EAAM7K,KAAKF,KAJ+B,cAK3CvB,EAAcuM,oBAL6B,kCAMhBR,IANgB,cAMxCS,EANwC,OAOxCC,EAAaH,EAAM7K,KAAKA,KACxBhB,EARwC,2BASzC+L,EAAgB/L,aAChBgM,EAAWhM,aAEhBW,EAAS,CACPG,KAAMxB,EAAWyB,WACjBC,KAAK,2BACA+K,GACA,CACDxL,KAAMyL,EAAWzL,KACjBP,kBAlBwC,qGAApD,uDA6BA,UAAAoB,UAAUC,cAAcC,kBAAxB,SAAoCC,YAAY,CAACT,KAAMvB,EAAc0M,eACpE,CAACtL,IAEI,8BACU,OAAdD,EAAMjB,IAAe,cAAC,EAAD,IAAc,cAAC,EAAD,O,OCpC1ByM,MAff,WAAgB,IAAD,EACaC,qBAAWvL,EAASpB,GADjC,mBACNkB,EADM,KACCC,EADD,KAGb,OACE,cAACH,EAAQ4L,SAAT,CAAkBlF,MAAO,CACvBxG,QACAC,YAFF,SAIE,qBAAKmC,UAAU,MAAf,SACE,cAAC,EAAD,SCHFuJ,EAAcC,QACW,cAA7BtE,OAAOuE,SAASC,UAEe,UAA7BxE,OAAOuE,SAASC,UAEhBxE,OAAOuE,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCxL,UAAUC,cACPwL,SAASF,GACTG,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvM,QACfU,UAAUC,cAAcC,YAI1B8L,QAAQC,IACN,+GAKET,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlBK,QAAQC,IAAI,sCAGRT,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BS,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCjGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFcnB,SAAkB1B,GACvB,GAA6C,kBAAmBxL,UAAW,CAGzE,GADkB,IAAImN,IAAIC,GAAwBxG,OAAOuE,SAASnB,MACpDqD,SAAWzG,OAAOuE,SAASkC,OAIvC,OAGFzG,OAAO4D,iBAAiB,QAAQ,WAC9B,IAAMe,EAAK,UAAM6B,GAAN,sBAEPnC,IAgEV,SAAiCM,EAAeC,GAE9C8B,MAAM/B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B7B,MAAK,SAAC8B,GAEL,IAAMC,EAAcD,EAASD,QAAQlD,IAAI,gBAEnB,MAApBmD,EAASjD,QACO,MAAfkD,IAA8D,IAAvCA,EAAYrJ,QAAQ,cAG5CpE,UAAUC,cAAcyN,MAAMhC,MAAK,SAACC,GAClCA,EAAagC,aAAajC,MAAK,WAC7B9E,OAAOuE,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLJ,QAAQC,IAAI,oEAtFV4B,CAAwBtC,EAAOC,GAI/BxL,UAAUC,cAAcyN,MAAMhC,MAAK,WACjCM,QAAQC,IACN,+GAMJX,EAAgBC,EAAOC,OE5B/BsC,CAR4B,CAC1B5B,SAAU,SAACP,GACTK,QAAQC,IAAI,mCAEdE,UAAW,SAACR,GACVK,QAAQ+B,KAAK,sCAQjBzB,M","file":"static/js/main.6f8d1d1e.chunk.js","sourcesContent":["export type PDType = {\r\n  nt: string,\r\n  cny: string,\r\n  cat: string,\r\n  pd: string\r\n};\r\n\r\nexport type PDTypeConvert = {\r\n  nt: Date,\r\n  cny: string,\r\n  cat: string,\r\n  pd: string\r\n}\r\nexport type PDFilter = {\r\n  ntStart: Date,\r\n  ntEnd: Date,\r\n  cnys: string[],\r\n  cats: string[]\r\n}\r\n\r\nexport type PDCurrentFilter = {\r\n  curNtStart: Date,\r\n  curNtEnd: Date,\r\n  cny: string,\r\n  cat: string\r\n}\r\n\r\nexport type ChartData = {\r\n  val: number,\r\n  note: string,\r\n  nt: Date,\r\n  pd: Date\r\n}\r\n\r\nexport type InitStateType = {\r\n  pds: PDTypeConvert[] | null,\r\n  pdFilter: PDFilter,\r\n  pdCurFilter: PDCurrentFilter,\r\n  controls: {\r\n    setting: boolean\r\n  },\r\n  mypd: number\r\n};\r\n\r\nexport enum ActionType {\r\n  SET_ALL_PD,\r\n  SET_FILTER_START_NOTICE_DATE,\r\n  SET_FILTER_END_NOTICE_DATE,\r\n  SET_FILTER_COUNTRY,\r\n  SET_FILTER_CATEGORY,\r\n  CONTROL_SETTING_SHOW,\r\n  CONTROL_SETTING_HIDE,\r\n  SET_MY_PD\r\n};\r\n\r\nexport type Action = {\r\n  type: ActionType;\r\n  data: any;\r\n};\r\n\r\nexport enum SWMessageType {\r\n  PAGE_LOADS,\r\n  SEND_PAGE_INIT_DATA,\r\n  SET_DB_MY_PD,  \r\n  SET_DB_FILTER_COUNTRY,\r\n  SET_DB_FILTER_CATEGORY\r\n}\r\n","import {createContext, Dispatch} from 'react';\r\nimport {InitStateType, Action} from '../types';\r\n\r\nexport const initState: InitStateType = {\r\n  pds: null,\r\n  pdFilter: {\r\n    ntStart: new Date(),\r\n    ntEnd: new Date(),\r\n    cnys: [],\r\n    cats: []\r\n  },\r\n  pdCurFilter: {\r\n    curNtStart: new Date(),\r\n    curNtEnd: new Date(),\r\n    cny: '',\r\n    cat: ''\r\n  },\r\n  controls: {\r\n    setting: false\r\n  },\r\n  mypd: 0\r\n};\r\n\r\nexport const Context = createContext<{\r\n  state: InitStateType,\r\n  dispatch: Dispatch<Action>\r\n}>({\r\n  state: initState,\r\n  dispatch: () => null\r\n});\r\n","import {ActionType, InitStateType, Action, SWMessageType} from '../types';\r\n\r\nexport const Reducer = (state: InitStateType, action: Action) => {\r\n  switch (action.type) {\r\n    case ActionType.SET_ALL_PD: {\r\n      return {\r\n        ...state,\r\n        ...action.data\r\n      };\r\n    }\r\n    case ActionType.SET_FILTER_START_NOTICE_DATE: {\r\n      return {\r\n        ...state,\r\n        ...{\r\n          pdCurFilter: {\r\n            ...state.pdCurFilter,\r\n            ...{\r\n              curNtStart: action.data\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case ActionType.SET_FILTER_END_NOTICE_DATE: {\r\n      return {\r\n        ...state,\r\n        ...{\r\n          pdCurFilter: {\r\n            ...state.pdCurFilter,\r\n            ...{\r\n              curNtEnd: action.data\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case ActionType.SET_FILTER_COUNTRY: {\r\n      navigator.serviceWorker.controller?.postMessage({type: SWMessageType.SET_DB_FILTER_COUNTRY, data: action.data});\r\n      return {\r\n        ...state,\r\n        ...{\r\n          pdCurFilter: {\r\n            ...state.pdCurFilter,\r\n            ...{\r\n              cny: action.data\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case ActionType.SET_FILTER_CATEGORY: {\r\n      navigator.serviceWorker.controller?.postMessage({type: SWMessageType.SET_DB_FILTER_CATEGORY, data: action.data});\r\n      return {\r\n        ...state,\r\n        ...{\r\n          pdCurFilter: {\r\n            ...state.pdCurFilter,\r\n            ...{\r\n              cat: action.data\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case ActionType.CONTROL_SETTING_SHOW: {\r\n      const stateUpdate = {\r\n        ...state\r\n      }\r\n      stateUpdate.controls.setting = true;\r\n      return stateUpdate;\r\n    }\r\n    case ActionType.CONTROL_SETTING_HIDE: {\r\n      const stateUpdate = {\r\n        ...state\r\n      }\r\n      stateUpdate.controls.setting = false;\r\n      return stateUpdate;\r\n    }\r\n    case ActionType.SET_MY_PD: {\r\n      const stateUpdate = {\r\n        ...state\r\n      };\r\n      stateUpdate.mypd = action.data;\r\n      navigator.serviceWorker.controller?.postMessage({type: SWMessageType.SET_DB_MY_PD, data: action.data});\r\n      return stateUpdate;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import {PDType, PDTypeConvert, PDFilter, PDCurrentFilter} from '../types'\r\n\r\nexport const initPDFilters = (pds: PDType[]): {pds: PDTypeConvert[], pdFilter: PDFilter, pdCurFilter: PDCurrentFilter} => {\r\n  const pdFilter: PDFilter = {\r\n    ntStart: new Date(),\r\n    ntEnd: new Date(),\r\n    cnys: [],\r\n    cats: []\r\n  }\r\n  const pdCurFilter: PDCurrentFilter = {\r\n    curNtStart: new Date(),\r\n    curNtEnd: new Date(),\r\n    cny: '',\r\n    cat: ''\r\n  }\r\n  // convert pd data notice date from string to date\r\n  const pdsConvert = pds.map(pd => ({\r\n    nt: new Date(`${pd.nt}T00:00:00`),\r\n    cny: pd.cny,\r\n    cat: pd.cat,\r\n    pd: pd.pd\r\n  }));\r\n  // sort pds\r\n  pdsConvert.sort((pd1, pd2) => pd1.nt.getTime() - pd2.nt.getTime());\r\n  pdFilter.ntStart = pdsConvert[0].nt;\r\n  pdFilter.ntEnd =  pdsConvert[pdsConvert.length - 1].nt\r\n  pdFilter.cnys = Array.from(new Set(pds.map(pd => pd.cny)));\r\n  pdFilter.cats = Array.from(new Set(pds.map(pd => pd.cat)));\r\n\r\n  pdCurFilter.curNtStart = pdsConvert[0].nt;\r\n  pdCurFilter.curNtEnd = pdsConvert[pdsConvert.length - 1].nt;\r\n  pdCurFilter.cny = pdFilter.cnys[0];\r\n  pdCurFilter.cat = pdFilter.cats[0];\r\n  return { pds:pdsConvert, pdFilter, pdCurFilter };\r\n}\r\n\r\nexport const filterPD = (pds: PDTypeConvert[], filter: PDCurrentFilter): PDTypeConvert[] => {\r\n  const {curNtStart, curNtEnd, cny, cat} = filter\r\n  return pds.filter(pd => pd.nt <= curNtEnd && pd.nt >= curNtStart && pd.cny === cny && pd.cat === cat)\r\n}\r\n\r\nexport const paddingPD = (pds: PDTypeConvert[]): PDTypeConvert[] => {\r\n  if (pds.length === 0) {\r\n    return pds;\r\n  }\r\n  const minDate: PDTypeConvert = {...pds[0]}\r\n  const maxDate: PDTypeConvert = {...(pds.slice(-1)[0])}\r\n  minDate.pd = 'C'\r\n  minDate.nt.setMonth(minDate.nt.getMonth() - 1);\r\n  maxDate.pd = 'C'\r\n  maxDate.nt.setMonth(maxDate.nt.getMonth() + 1);\r\n  pds.unshift(minDate)\r\n  pds.push(maxDate);\r\n  return pds;\r\n}\r\n","import React from 'react';\r\nimport './loading.scss';\r\n\r\nconst Loading = () => {\r\n  return <div className='lds-facebook'>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n}\r\n\r\nexport default Loading;\r\n","import {ChartData} from '../types';\r\n\r\nexport const getDateString = (d: Date) => {\r\n  return [\r\n    d.getFullYear(),\r\n    ('0' + (d.getMonth() + 1)).slice(-2),\r\n    ('0' + d.getDate()).slice(-2)\r\n  ].join('-');\r\n}\r\n\r\nexport const timeInDay = 24 * 3600 * 1000;\r\nexport const timeInMonth = 30 * timeInDay;\r\nexport const timeInYear = 12 * timeInMonth;\r\n\r\nexport const timespanToString = (d: number, verbose: boolean): string => {\r\n  const day = verbose ? ' Day ' : 'D';\r\n  const month = verbose ? ' Month ' : 'M';\r\n  const year = verbose ? ' Year ': 'Y';\r\n  if (d < timeInMonth) {\r\n    return `${Math.floor(d/timeInDay)}${day}`;\r\n  } else if (d < timeInYear) {\r\n    const monthsInTime = Math.floor(d/timeInMonth);\r\n    const leftTime = d - monthsInTime * timeInMonth;\r\n    return `${monthsInTime}${month}${timespanToString(leftTime, verbose)}`;\r\n  } else {\r\n    const yearsInTime = Math.floor(d/timeInYear);\r\n    const leftTime = d - yearsInTime * timeInYear;\r\n    return `${yearsInTime}${year}${timespanToString(leftTime, verbose)}`;\r\n  }\r\n}\r\n\r\nexport const getChartText = (data: ChartData, mypd: number) => {\r\n  if (!data) {\r\n    return ['N/A','N/A','N/A'];\r\n  }\r\n  const checkDate = getDateString(data.nt);\r\n  let pd = ''\r\n  let message = '';\r\n  if (data.note === 'C') {\r\n    pd = 'Priority Date: Current';\r\n    message = 'No need to wait';\r\n  } else if (data.note === 'U') {\r\n    pd = 'Priority Date: Unavailable';\r\n    message = 'Unavaliable, please wait...'\r\n  } else {\r\n    pd = `Priority Date: ${getDateString(data.pd)}`;\r\n\r\n    message = `please wait: ${timespanToString(mypd - data.pd.getTime(), true)}`\r\n  }\r\n  return [checkDate, pd, message];\r\n}\r\n\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  id: \"x\",\n  d: \"M18.717 6.697l-1.414-1.414-5.303 5.303-5.303-5.303-1.414 1.414 5.303 5.303-5.303 5.303 1.414 1.414 5.303-5.303 5.303 5.303 1.414-1.414-5.303-5.303z\"\n});\n\nfunction SvgClose(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#FFFFFF\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.d42197b2.svg\";\nexport { ForwardRef as ReactComponent };","import React, {useContext} from 'react';\r\nimport {Context} from '../contexts/context';\r\nimport { ActionType } from '../types';\r\nimport {getDateString} from '../utils/date-utils';\r\nimport { ReactComponent as CloseSVG } from '../assets/close.svg';\r\n\r\nimport './pd-setting-modal.scss';\r\n\r\nconst PDSettingModal = () => {\r\n  const {state, dispatch} = useContext(Context);\r\n  const closeModal = () => {\r\n    dispatch({\r\n      type: ActionType.CONTROL_SETTING_HIDE,\r\n      data: ''\r\n    });\r\n  }\r\n  const mypd = state.mypd > 0 ? new Date(state.mypd) : new Date();\r\n  return <div>\r\n    <div className='filter-setting-container'></div>\r\n    <div className='filter-setting-modal'>\r\n      <div className='filter-setting-modal-close' onClick={closeModal}>\r\n        <CloseSVG />\r\n      </div>\r\n      <div className='filter-setting-modal-main'>\r\n        <div className='filter-setting-modal-row'>\r\n          <label htmlFor='my-pd-date'>Choose Your Priority Date:</label>\r\n          <input type='date' id='my-pd-date' defaultValue={getDateString(mypd)}\r\n            onChange={evt => {\r\n              dispatch({\r\n                type: ActionType.SET_MY_PD,\r\n                data: new Date(`${evt.target.value}T00:00:00`).getTime()\r\n              })\r\n            }}\r\n          ></input>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>;\r\n}\r\n\r\nexport default PDSettingModal;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M 22.205078 2 A 1.0001 1.0001 0 0 0 21.21875 2.8378906 L 20.246094 8.7929688 C 19.076509 9.1331971 17.961243 9.5922728 16.910156 10.164062 L 11.996094 6.6542969 A 1.0001 1.0001 0 0 0 10.708984 6.7597656 L 6.8183594 10.646484 A 1.0001 1.0001 0 0 0 6.7070312 11.927734 L 10.164062 16.873047 C 9.583454 17.930271 9.1142098 19.051824 8.765625 20.232422 L 2.8359375 21.21875 A 1.0001 1.0001 0 0 0 2.0019531 22.205078 L 2.0019531 27.705078 A 1.0001 1.0001 0 0 0 2.8261719 28.691406 L 8.7597656 29.742188 C 9.1064607 30.920739 9.5727226 32.043065 10.154297 33.101562 L 6.6542969 37.998047 A 1.0001 1.0001 0 0 0 6.7597656 39.285156 L 10.648438 43.175781 A 1.0001 1.0001 0 0 0 11.927734 43.289062 L 16.882812 39.820312 C 17.936999 40.39548 19.054994 40.857928 20.228516 41.201172 L 21.21875 47.164062 A 1.0001 1.0001 0 0 0 22.205078 48 L 27.705078 48 A 1.0001 1.0001 0 0 0 28.691406 47.173828 L 29.751953 41.1875 C 30.920633 40.838997 32.033372 40.369697 33.082031 39.791016 L 38.070312 43.291016 A 1.0001 1.0001 0 0 0 39.351562 43.179688 L 43.240234 39.287109 A 1.0001 1.0001 0 0 0 43.34375 37.996094 L 39.787109 33.058594 C 40.355783 32.014958 40.813915 30.908875 41.154297 29.748047 L 47.171875 28.693359 A 1.0001 1.0001 0 0 0 47.998047 27.707031 L 47.998047 22.207031 A 1.0001 1.0001 0 0 0 47.160156 21.220703 L 41.152344 20.238281 C 40.80968 19.078827 40.350281 17.974723 39.78125 16.931641 L 43.289062 11.933594 A 1.0001 1.0001 0 0 0 43.177734 10.652344 L 39.287109 6.7636719 A 1.0001 1.0001 0 0 0 37.996094 6.6601562 L 33.072266 10.201172 C 32.023186 9.6248101 30.909713 9.1579916 29.738281 8.8125 L 28.691406 2.828125 A 1.0001 1.0001 0 0 0 27.705078 2 L 22.205078 2 z M 23.056641 4 L 26.865234 4 L 27.861328 9.6855469 A 1.0001 1.0001 0 0 0 28.603516 10.484375 C 30.066026 10.848832 31.439607 11.426549 32.693359 12.185547 A 1.0001 1.0001 0 0 0 33.794922 12.142578 L 38.474609 8.7792969 L 41.167969 11.472656 L 37.835938 16.220703 A 1.0001 1.0001 0 0 0 37.796875 17.310547 C 38.548366 18.561471 39.118333 19.926379 39.482422 21.380859 A 1.0001 1.0001 0 0 0 40.291016 22.125 L 45.998047 23.058594 L 45.998047 26.867188 L 40.279297 27.871094 A 1.0001 1.0001 0 0 0 39.482422 28.617188 C 39.122545 30.069817 38.552234 31.434687 37.800781 32.685547 A 1.0001 1.0001 0 0 0 37.845703 33.785156 L 41.224609 38.474609 L 38.53125 41.169922 L 33.791016 37.84375 A 1.0001 1.0001 0 0 0 32.697266 37.808594 C 31.44975 38.567585 30.074755 39.148028 28.617188 39.517578 A 1.0001 1.0001 0 0 0 27.876953 40.3125 L 26.867188 46 L 23.052734 46 L 22.111328 40.337891 A 1.0001 1.0001 0 0 0 21.365234 39.53125 C 19.90185 39.170557 18.522094 38.59371 17.259766 37.835938 A 1.0001 1.0001 0 0 0 16.171875 37.875 L 11.46875 41.169922 L 8.7734375 38.470703 L 12.097656 33.824219 A 1.0001 1.0001 0 0 0 12.138672 32.724609 C 11.372652 31.458855 10.793319 30.079213 10.427734 28.609375 A 1.0001 1.0001 0 0 0 9.6328125 27.867188 L 4.0019531 26.867188 L 4.0019531 23.052734 L 9.6289062 22.117188 A 1.0001 1.0001 0 0 0 10.435547 21.373047 C 10.804273 19.898143 11.383325 18.518729 12.146484 17.255859 A 1.0001 1.0001 0 0 0 12.111328 16.164062 L 8.8261719 11.46875 L 11.523438 8.7734375 L 16.185547 12.105469 A 1.0001 1.0001 0 0 0 17.28125 12.148438 C 18.536908 11.394293 19.919867 10.822081 21.384766 10.462891 A 1.0001 1.0001 0 0 0 22.132812 9.6523438 L 23.056641 4 z M 25 17 C 20.593567 17 17 20.593567 17 25 C 17 29.406433 20.593567 33 25 33 C 29.406433 33 33 29.406433 33 25 C 33 20.593567 29.406433 17 25 17 z M 25 19 C 28.325553 19 31 21.674447 31 25 C 31 28.325553 28.325553 31 25 31 C 21.674447 31 19 28.325553 19 25 C 19 21.674447 21.674447 19 25 19 z\"\n});\n\nfunction SvgSettings(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#FFFFFF\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"32px\",\n    height: \"32px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSettings);\nexport default __webpack_public_path__ + \"static/media/settings.c8963548.svg\";\nexport { ForwardRef as ReactComponent };","import React, {useContext, useState}  from 'react';\r\nimport {Context} from '../contexts/context';\r\nimport {getDateString} from '../utils/date-utils';\r\nimport {ActionType} from '../types';\r\nimport PDSettingModal from './pd-setting-modal';\r\nimport './pd-filter.scss';\r\nimport { ReactComponent as SettingSVG } from '../assets/settings.svg';\r\n\r\nconst PDFilter = () => {\r\n  const {state, dispatch} = useContext(Context);\r\n  const [showSetting, setShowSetting] = useState(false);\r\n\r\n  const {ntStart, ntEnd, cnys, cats} = state.pdFilter;\r\n\r\n  const {curNtStart, curNtEnd, cny, cat} = state.pdCurFilter;\r\n\r\n  const {controls} = state;\r\n\r\n  const handleSettings = () => {\r\n    dispatch({\r\n      type: ActionType.CONTROL_SETTING_SHOW,\r\n      data: ''\r\n    });\r\n  }\r\n\r\n  return <div className='filter-container'>\r\n    <div className='filter-control'>\r\n      <label htmlFor='date-from'>From:</label>\r\n      <input type='date' id='date-from' defaultValue={getDateString(new Date(curNtStart))}\r\n        min={getDateString(new Date(ntStart))} max={getDateString(new Date(ntEnd))}\r\n        onChange={evt => {\r\n          const updatedDate = new Date(`${evt.target.value}T00:00:00`).getTime();\r\n          dispatch({\r\n            type: ActionType.SET_FILTER_START_NOTICE_DATE,\r\n            data: updatedDate\r\n          });\r\n        }}\r\n      ></input>\r\n      <label htmlFor='date-to'>To:</label>\r\n      <input type='date' id='date-to' defaultValue={getDateString(new Date(curNtEnd))}\r\n        min={getDateString(new Date(ntStart))} max={getDateString(new Date(ntEnd))}\r\n        onChange={evt => {\r\n          const updatedDate = new Date(`${evt.target.value}T00:00:00`).getTime();\r\n          dispatch({\r\n            type: ActionType.SET_FILTER_END_NOTICE_DATE,\r\n            data: updatedDate\r\n          })\r\n        }}\r\n      ></input>\r\n    </div>\r\n    <div className='filter-control'>\r\n      <label htmlFor='pd-country'>Region:</label>\r\n      <select id='pd-country'\r\n        onChange={evt => dispatch({\r\n          type: ActionType.SET_FILTER_COUNTRY,\r\n          data: evt.target.value\r\n        })}\r\n      >\r\n        {cnys.map(c => <option value={c} key={`pd-country-${c}`} selected={c == cny}>{c}</option>)}\r\n      </select>\r\n    </div>\r\n    <div className='filter-control'>\r\n      <label htmlFor='pd-category'>Category:</label>\r\n      <select id='pd-category'\r\n        onChange={evt => dispatch({\r\n          type: ActionType.SET_FILTER_CATEGORY,\r\n          data: evt.target.value\r\n        })}\r\n      >\r\n        {cats.map(c => <option value={c} key={`pd-category-${c}`} selected={c == cat}>{c}</option>)}\r\n      </select>\r\n    </div>\r\n    <div className='filter-control'>\r\n      <button className='settings' onClick={handleSettings}>\r\n        <SettingSVG />\r\n      </button>\r\n    </div>\r\n    { controls.setting ? <PDSettingModal /> : <></>}\r\n  </div>\r\n}\r\n\r\nexport default PDFilter;\r\n","import React, {useContext, useRef, useEffect} from 'react';\r\nimport {Context} from '../contexts/context';\r\nimport {filterPD} from '../utils/data-utils';\r\nimport {getChartText, timeInDay, getDateString} from '../utils/date-utils';\r\nimport {ChartData} from '../types';\r\nimport * as d3 from 'd3';\r\n\r\nconst PDChart = () => {\r\n  const {state} = useContext(Context);\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const {pds, pdCurFilter, mypd}  = state;\r\n    if (!svgRef.current || !pds) {\r\n      return;\r\n    }\r\n    const current = svgRef.current as HTMLElement\r\n    const svgWidth = window.innerWidth * 0.9;\r\n    const svgHeight = window.innerHeight * 0.8;\r\n    const margin = {\r\n      top: 60,\r\n      right: 10,\r\n      bottom: 30,\r\n      left: 70\r\n    };\r\n    current.style.width = `${svgWidth}px`;\r\n    current.style.height = `${svgHeight}px`;\r\n    current.style.backgroundColor = 'slategrey';\r\n    const chartWidth = svgWidth - margin.left - margin.right;\r\n    const chartHeight = svgHeight - margin.top - margin.bottom;\r\n    const filteredPD = filterPD(pds, pdCurFilter);\r\n    const xScale = d3.scaleTime()\r\n    .domain([pdCurFilter.curNtStart, pdCurFilter.curNtEnd])\r\n    .range([0, chartWidth])\r\n\r\n    const data: ChartData[] = filteredPD.map(pd => {\r\n      const res = {\r\n        val: 1000,\r\n        note: '',\r\n        nt: pd.nt,\r\n        pd: new Date()\r\n      };\r\n      if (pd.pd === 'C' || pd.pd === 'U') {\r\n        res.note = pd.pd\r\n      } else {\r\n        const pdDate = new Date(`${pd.pd}T00:00:00`);\r\n        if (isNaN(pdDate.getTime())) {\r\n          res.note = 'NAN';\r\n        } else {\r\n          res.val = res.nt.getTime() - pdDate.getTime();\r\n          res.pd = pdDate;\r\n        }\r\n      }\r\n      return res;\r\n    });\r\n\r\n    const yScale = d3.scaleLinear()\r\n    .domain([0, d3.max(data, y => y.val)!])\r\n    .range([chartHeight, 0]);\r\n    \r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove()\r\n\r\n    const bisect = d3.bisector<ChartData, Date>(d => {\r\n      return d.nt\r\n    }).left;\r\n\r\n    // chart area\r\n    const chartRect = svg\r\n    .append('rect')\r\n    .style('fill', 'none')\r\n    .style('pointer-events', 'all')\r\n    .attr('class', 'pd-chart-area')\r\n    .attr('width', chartWidth)\r\n    .attr('height', chartHeight)\r\n    .attr('transform', `translate(${margin.left},${margin.top})`)\r\n    .on('mousemove', (evt) => {\r\n      const xPos = evt.offsetX - margin.left;\r\n      const dataX = xScale.invert(xPos);\r\n      const dataIdx = bisect(data, dataX, 1);\r\n      const selectedData = data[dataIdx];\r\n      if (!selectedData) {\r\n        return;\r\n      }\r\n      focus\r\n      .attr('cx', xScale(selectedData.nt) + margin.left)\r\n      .attr('cy', yScale(selectedData.val) + margin.top)\r\n\r\n      const texts = getChartText(selectedData, 0);\r\n      //focusText\r\n      //.attr('x', xScale(selectedData.nt) + margin.left - 20)\r\n      //.attr('y', yScale(selectedData.val) + margin.top - 60);\r\n\r\n      focusText.selectAll('.sub-text')\r\n      .data(texts)\r\n      .text(d => d)\r\n      //.attr('x', xScale(selectedData.nt) + margin.left - 20)\r\n\r\n    })\r\n    .on('mouseout', () => {\r\n      focus.style('opacity', 0);\r\n      focusText.style('opacity', 0);\r\n    })\r\n    .on('mouseover', () => {\r\n      focus.style('opacity', 1);\r\n      focusText.style('opacity', 1);\r\n    })\r\n\r\n    const chart = svg.append('g')\r\n    .attr('class', 'pd-chart')\r\n    .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    // Add X grid lines with labels\r\n    const xAxis = d3.axisBottom<Date>(xScale)\r\n    .ticks(d3.timeYear)\r\n    .tickFormat(d3.timeFormat('%Y'))\r\n    const xAxisGroup = svg.append('g')\r\n    .attr('transform', `translate(${margin.left}, ${chartHeight + margin.top})`)\r\n    .call(xAxis);\r\n\r\n    // Add Y grid lines with labels\r\n    const yAxis = d3.axisLeft(yScale)\r\n    .tickFormat(d => Math.floor(d.valueOf() / timeInDay) + '')\r\n\r\n    const yAxisGroup = svg.append('g').call(yAxis)\r\n    .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    const line = d3.line<ChartData>()\r\n    .x(d => xScale(d.nt))\r\n    .y(d => yScale(d.val))\r\n\r\n    chart.append('path')\r\n    .attr('stroke-width', 1.5)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', 'bisque')\r\n    .attr('d', line(data));\r\n\r\n    const focus = svg\r\n    .append('g')\r\n    .append('circle')\r\n    .style('fill', 'red')\r\n    .attr('stroke', 'red')\r\n    .attr('r', 3)\r\n    .style('opacity', 0)\r\n\r\n    const focusText = svg\r\n    .append('g')\r\n    .append('text')\r\n    .style('opacity', 0)\r\n    .style('fill', 'white')\r\n    .attr('x', margin.left + 20)\r\n    .attr('y', margin.top + 20)\r\n    .attr('text-anchor', 'left')\r\n    .attr('alignment-baseline', 'middle')\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      focusText.append('tspan')\r\n      .attr('class', 'sub-text')\r\n      .attr('x', margin.left + 20)\r\n      .attr('dy', '1em');\r\n    }\r\n\r\n    let captionText = ''\r\n    if (mypd) {\r\n      const mypdText = getDateString(new Date(mypd))\r\n      const waitText = getChartText(data.slice(-1)[0], mypd)[2];\r\n      captionText = `Your PD: ${mypdText}, ${waitText}`; \r\n    }\r\n    const caption = svg\r\n    .append('g')\r\n    .append('text')\r\n    .style('fill', 'white')\r\n    .style('font-size', '2em')\r\n    .attr('x', 20)\r\n    .attr('y', 40)\r\n    .text(captionText)\r\n\r\n    const yAxisLabel = svg\r\n    .append('g')\r\n    .append('text')\r\n    .style('fill', 'white')\r\n    .style('font-size', '1em')\r\n    .attr('transform', `translate(25, ${svgHeight / 2}) rotate(-90)`)\r\n    .text('Waiting days');\r\n  }, [svgRef, state.pdCurFilter, state.pds, state.mypd])\r\n  return <div>\r\n    <svg ref={svgRef} className='svg-container'></svg>\r\n  </div>\r\n}\r\n\r\nexport default PDChart;\r\n","import React from 'react';\r\nimport PDFilter from './pd-filter';\r\nimport PDChart from './pd-chart';\r\nimport './pd-view.scss';\r\n\r\nconst PDView = () => {\r\n  return <div className='pd-view'>\r\n    <h1>\r\n      Employment Based Priority Date (Official release <a \r\n        href='https://travel.state.gov/content/travel/en/legal/visa-law0/visa-bulletin.html'\r\n        target='_blank'>here</a>)\r\n    </h1>\r\n    <PDFilter />\r\n    <PDChart />\r\n  </div>\r\n}\r\n\r\nexport default PDView;\r\n","import React, { useContext } from 'react';\r\nimport { useEffect } from 'react';\r\nimport {Context} from '../contexts/context';\r\nimport {ActionType, SWMessageType} from '../types';\r\nimport {initPDFilters} from '../utils/data-utils';\r\nimport Loading from './loading';\r\nimport PDView from './pd-view';\r\nimport axios from 'axios';\r\n\r\nconst Main = () => {\r\n  const {state, dispatch} = useContext(Context);\r\n\r\n  useEffect(() => {\r\n    const getAllPD = async () => {\r\n      const resp = await axios.get('/api/all_pd');\r\n      if (resp.status === 200 && resp.data) {\r\n        return initPDFilters(resp.data);\r\n      } else {\r\n        return {\r\n          pdCurFilter: null\r\n        };\r\n      }\r\n    }\r\n\r\n    navigator.serviceWorker.addEventListener('message', async (event) => {\r\n      if (!event.data) {\r\n        return;\r\n      }\r\n      switch (event.data.type) {\r\n        case SWMessageType.SEND_PAGE_INIT_DATA:{\r\n          const dataFromRequest = await getAllPD();\r\n          const dataFromSW = event.data.data;\r\n          const pdCurFilter = {\r\n            ...dataFromRequest.pdCurFilter,\r\n            ...dataFromSW.pdCurFilter\r\n          }\r\n          dispatch({\r\n            type: ActionType.SET_ALL_PD,\r\n            data: {\r\n              ...dataFromRequest,\r\n              ...{\r\n                mypd: dataFromSW.mypd,\r\n                pdCurFilter\r\n              }\r\n            }\r\n          });\r\n          break;\r\n        }\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    navigator.serviceWorker.controller?.postMessage({type: SWMessageType.PAGE_LOADS});\r\n  }, [dispatch]);\r\n\r\n  return (<div>\r\n    { state.pds === null ? <Loading /> : <PDView />}\r\n  </div>);\r\n}\r\n\r\nexport default Main;\r\n","import React, {useReducer} from 'react';\nimport {Context, initState} from './contexts/context';\nimport {Reducer} from './contexts/reducer';\n\nimport Main from './components/main';\nimport './App.scss';\nfunction App() {\n  const [state, dispatch] = useReducer(Reducer, initState);\n\n  return (\n    <Context.Provider value={{\n      state,\n      dispatch\n    }}>\n      <div className=\"App\">\n        <Main />\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nconst serviceWorkerConfig = {\n  onUpdate: (registration: ServiceWorkerRegistration) => {\n    console.log('service worker on update state');\n  },\n  onSuccess: (registration: ServiceWorkerRegistration) => {\n    console.info('service worker on success state');\n  }\n}\nserviceWorkerRegistration.register(serviceWorkerConfig);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}